%%Identification
%%The package identifies itself and the LaTeX version needed
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{FLaAL}[2019/08/27 FLaAL package]

%%Requeiried packages and preliminary definitions, needed by the options
\RequirePackage{xstring}
\RequirePackage{tikz}
\RequirePackage{fp}
\RequirePackage{xkeyval}
\RequirePackage{xparse}
\RequirePackage{ifthen}

%%This parts handles the options passed to the package.
\ProcessOptions\relax

%%Body of the package, most of the declarations appear here.

\newcommand{\test@empty}{xxx}
\newcommand{\e}{$\varepsilon$}

% Label Processing for
% Finite Automata
\ExplSyntaxOn
    
\NewDocumentCommand{\fa@label@processing}{O{;}m}
{
    \fa_make:nn {#1} {#2}
}

\cs_new_protected:Npn \fa_make:nn #1 #2
{
    \seq_set_split:Nnn \l_fa_args_seq { #1 } { #2 }
    \seq_pop_left:NN \l_fa_args_seq \l_fa_temp_tl
    \StrLen{\l_fa_temp_tl}[\falength]
    \seq_clear:N \l_fa_used_labels
    \ifthenelse{\equal{\falength}{0}}{
        $\varepsilon$
    }{
        \seq_put_right:NV \l_fa_used_labels \l_fa_temp_tl
        \l_fa_temp_tl
    }
    \seq_map_inline:Nn \l_fa_args_seq {
        \tl_set:Nn \tl_fa_ele_in_list {false}
        \seq_map_inline:Nn \l_fa_used_labels {
            \ifthenelse{\equal{##1}{####1}}{
                \tl_set:Nn \tl_fa_ele_in_list {true}
            }{}
        }
        \ifthenelse{\equal{false}{\tl_fa_ele_in_list}}{
            ,\space ##1
            \seq_put_right:Nx \l_fa_used_labels {##1}
        }{}
    }
}

\tl_new:N \tl_fa_ele_in_list
\seq_new:N \l_fa_used_labels
\seq_new:N \l_fa_args_seq
\tl_new:N \l_fa_temp_tl

\ExplSyntaxOff

% % Label Processing for
% % DKA
% \ExplSyntaxOn
    
% \NewDocumentCommand{\dka@label@processing}{O{;}m}
% {
%     \dka_make:nn {#1} {#2}
% }

% \cs_new_protected:Npn \dka_make:nn #1 #2
% {
%     % split by semicolon
%     \seq_set_split:Nnn \l_dka_args_seq { #1 } { #2 }
%     % pop first element
%     \seq_pop_left:NN \l_dka_args_seq \l_dka_temp_tl
    
%     % split first element by comma
%     \seq_set_split:NnV \l_dka_ele_args_seq {,} {\l_dka_temp_tl}
%     % pop first element
%     \seq_pop_left:NN \l_dka_ele_args_seq \l_dka_ele_first_tl
%     % pop second element
%     \seq_pop_left:NN \l_dka_ele_args_seq \l_dka_ele_second_tl
%     % pop third element
%     \seq_pop_left:NN \l_dka_ele_args_seq \l_dka_ele_third_tl
%     \StrLen{\l_dka_ele_third_tl}[\dkathirdlength]
%     % result is (first,second):third
%     (\l_dka_ele_first_tl,\l_dka_ele_second_tl):\int_compare:nTF {\dkathirdlength=0}{$\varepsilon$}{\l_dka_ele_third_tl}
    
%     % clearing the processed list, to be ready to be filled again
%     \seq_clear:N \l_dka_proc_args
%     % going trough all remaining labels
%     \seq_map_inline:Nn \l_dka_args_seq {
%         % split first element by comma
%         \seq_set_split:Nnn \l_dka_ele_args_seq {,} {##1}
%         % pop first element
%         \seq_pop_left:NN \l_dka_ele_args_seq \l_dka_ele_first_tl
%         % pop second element
%         \seq_pop_left:NN \l_dka_ele_args_seq \l_dka_ele_second_tl
%         % pop third element
%         \seq_pop_left:NN \l_dka_ele_args_seq \l_dka_ele_third_tl
%         \StrLen{\l_dka_ele_third_tl}[\dkathirdlength]
%         % adding labels to the proccessed labels
%         \seq_put_right:Nx \l_dka_proc_args {(\l_dka_ele_first_tl,\l_dka_ele_second_tl):\int_compare:nTF {\dkathirdlength=0}{$\varepsilon$}{\l_dka_ele_third_tl}}
%     }
%     % print it below each other
%     \seq_map_inline:Nn \l_dka_proc_args {\\##1}
    
% }

% \seq_new:N \l_dka_ele_args_seq
% \seq_new:N \l_dka_args_seq
% \seq_new:N \l_dka_proc_args
% \tl_new:N \l_dka_temp_tl
% \tl_new:N \l_dka_ele_first_tl
% \tl_new:N \l_dka_ele_second_tl
% \tl_new:N \l_dka_ele_third_tl

% \ExplSyntaxOff

% Label Processing for
% Pushdown Automata
\ExplSyntaxOn
    
\NewDocumentCommand{\pa@label@processing}{O{;}m}
{
    \pa_make:nn {#1} {#2}
}

\cs_new_protected:Npn \pa_make:nn #1 #2
{
    % split by semicolon
    \seq_set_split:Nnn \l_pa_args_seq { #1 } { #2 }
    % pop first element
    \seq_pop_left:NN \l_pa_args_seq \l_pa_temp_tl
    
    % split first element by comma
    \seq_set_split:NnV \l_pa_ele_args_seq {,} {\l_pa_temp_tl}
    % pop first element
    \seq_pop_left:NN \l_pa_ele_args_seq \l_pa_ele_first_tl
    % pop second element
    \seq_pop_left:NN \l_pa_ele_args_seq \l_pa_ele_second_tl
    \StrLen{\l_pa_ele_second_tl}[\paseclength]
    % pop third element
    \seq_pop_left:NN \l_pa_ele_args_seq \l_pa_ele_third_tl
    \StrLen{\l_pa_ele_third_tl}[\pathirdlength]
    % result is (first,second):third
    (\l_pa_ele_first_tl,\int_compare:nTF {\paseclength=0}{$\varepsilon$}{\l_pa_ele_second_tl}):\int_compare:nTF {\pathirdlength=0}{$\varepsilon$}{\l_pa_ele_third_tl}
    
    % clearing the processed list, to be ready to be filled again
    \seq_clear:N \l_pa_proc_args
    % going trough all remaining labels
    \seq_map_inline:Nn \l_pa_args_seq {
        % split first element by comma
        \seq_set_split:Nnn \l_pa_ele_args_seq {,} {##1}
        % pop first element
        \seq_pop_left:NN \l_pa_ele_args_seq \l_pa_ele_first_tl
        % pop second element
        \seq_pop_left:NN \l_pa_ele_args_seq \l_pa_ele_second_tl
        \StrLen{\l_pa_ele_second_tl}[\paseclength]
        % pop third element
        \seq_pop_left:NN \l_pa_ele_args_seq \l_pa_ele_third_tl
        \StrLen{\l_pa_ele_third_tl}[\pathirdlength]
        % adding labels to the proccessed labels
        \seq_put_right:Nx \l_pa_proc_args {(\l_pa_ele_first_tl,\int_compare:nTF {\paseclength=0}{$\varepsilon$}{\l_pa_ele_second_tl} ):\int_compare:nTF {\pathirdlength=0}{$\varepsilon$}{\l_pa_ele_third_tl}}
    }
    % print it below each other
    \seq_map_inline:Nn \l_pa_proc_args {\\##1}
    
}

\seq_new:N \l_pa_ele_args_seq
\seq_new:N \l_pa_args_seq
\seq_new:N \l_pa_proc_args
\tl_new:N \l_pa_temp_tl
\tl_new:N \l_pa_ele_first_tl
\tl_new:N \l_pa_ele_second_tl
\tl_new:N \l_pa_ele_third_tl

\ExplSyntaxOff

% Label Processing for
% TM
\ExplSyntaxOn
    
\NewDocumentCommand{\tm@label@processing}{O{;}m}
{
    \tm_make:nn {#1} {#2}
}

\cs_new_protected:Npn \tm_make:nn #1 #2
{
    % split by semicolon
    \seq_set_split:Nnn \l_tm_args_seq { #1 } { #2 }
    % pop first element
    \seq_pop_left:NN \l_tm_args_seq \l_tm_temp_tl
    
    % split first element by comma
    \seq_set_split:NnV \l_tm_ele_args_seq {,} {\l_tm_temp_tl}
    % pop first element
    \seq_pop_left:NN \l_tm_ele_args_seq \l_tm_ele_first_tl
    % pop second element
    \seq_pop_left:NN \l_tm_ele_args_seq \l_tm_ele_second_tl
    % pop third element
    \seq_pop_left:NN \l_tm_ele_args_seq \l_tm_ele_third_tl
    % result is (first,second):third
    \l_tm_ele_first_tl :\l_tm_ele_second_tl,\l_tm_ele_third_tl
    
    % clearing the processed list, to be ready to be filled again
    \seq_clear:N \l_tm_proc_args
    % going trough all remaining labels
    \seq_map_inline:Nn \l_tm_args_seq {
        % split first element by comma
        \seq_set_split:Nnn \l_tm_ele_args_seq {,} {##1}
        % pop first element
        \seq_pop_left:NN \l_tm_ele_args_seq \l_tm_ele_first_tl
        % pop second element
        \seq_pop_left:NN \l_tm_ele_args_seq \l_tm_ele_second_tl
        % pop third element
        \seq_pop_left:NN \l_tm_ele_args_seq \l_tm_ele_third_tl
        % adding labels to the proccessed labels
        % Result is first:second,third
        \seq_put_right:Nx \l_tm_proc_args {\l_tm_ele_first_tl :\l_tm_ele_second_tl,\l_tm_ele_third_tl}
    }
    % print it below each other
    \seq_map_inline:Nn \l_tm_proc_args {\\##1}
    
}

\seq_new:N \l_tm_ele_args_seq
\seq_new:N \l_tm_args_seq
\seq_new:N \l_tm_proc_args
\tl_new:N \l_tm_temp_tl
\tl_new:N \l_tm_ele_first_tl
\tl_new:N \l_tm_ele_second_tl
\tl_new:N \l_tm_ele_third_tl

\ExplSyntaxOff


\newcommand{\startState}[3]{
    \FPset\x{0}
    \FPadd{\x}{-10}{#2}
    \FPset\y{0}
    \FPadd{\y}{}{#3}
    \node (#1) [state] at (#2mm, #3mm) {#1};
    \draw [arrow] (\x mm, \y mm) -- node[anchor=east,xshift=-0.3cm] {Start} (#1);
}

\newcommand{\normalState}[3]{
    \node (#1) [state] at (#2mm, #3mm) {#1};
}

\newcommand{\finalState}[3]{
    \node (#1) [state] at (#2mm, #3mm) {#1};
    \node (#1finalstate)[smallerstate, right of=#1, xshift=-1cm, yshift=0] {#1};
}

\newcommand{\stafiState}[3]{
    \FPset\x{0}
    \FPadd{\x}{-10}{#2}
    \FPset\y{0}
    \FPadd{\y}{}{#3}
    \node (#1) [state] at (#2mm, #3mm) {#1};
    \node (#1finalstate)[smallerstate, right of=#1, xshift=-1cm, yshift=0] {#1};
    \draw [arrow] (\x mm, \y mm) -- node[anchor=east,xshift=-0.3cm] {Start} (#1);
}


\newenvironment{transitiongraph}[1][fa]
{
    \IfStrEqCase{#1}{
        {fa}{}%
        {pa}{}%
        {tm}{}%
    }[\PackageError{FLaAL}{#1 is no valid option for tg environment. Use one of fa (Finite Automata), pa (Pushdown Automata) or tm (Turing Machine)};]
    \tikzstyle{state} = [circle, minimum width=1cm, text centered, draw=black, fill=white,inner sep=4]
    \tikzstyle{smallerstate} = [circle, minimum width=0.8cm, text centered, draw=black, fill=white,inner sep=2]
    \tikzstyle{arrow} = [thick,->,>=stealth]
    % \newcommand{\test}{
    %     \filldraw[color=red!60, fill=red!5, very thick](-1,0) circle (1.5);
    %     \fill[blue!50] (2.5,0) ellipse (1.5 and 0.5);
    %     \draw[ultra thick, ->] (6.5,0) arc (0:220:1);
    % }
    \newcommand{\state}[4][n]{
        \IfStrEqCase{##1}{
            {s}{
                \startState{##2}{##3}{##4}
            }%
            {n}{
                \normalState{##2}{##3}{##4}
            }%
            {f}{
                \finalState{##2}{##3}{##4}
            }%
            {sf}{
                \stafiState{##2}{##3}{##4}
            }
        }[\PackageWarning{FLaAL}{##1 is no valid option. Defaults to normal}{}\normalState{##2}{##3}{##4}]
    }
    
    \newcommand{\t@line}{straight}
    \newcommand{\t@label}{south}
    
    \define@key{trans}{line}{
        \IfStrEqCase{##1}{
            {straight}{
                \renewcommand{\t@line}{straight}
            }%
            {left}{
                \renewcommand{\t@line}{bend left}
            }%
            {right}{
                \renewcommand{\t@line}{bend right}
            }%
            {top}{
                \renewcommand{\t@line}{loop above}
            }%
            {bot}{
                \renewcommand{\t@line}{loop below}
            }%
            {start}{
                \renewcommand{\t@line}{start}
            }%
        }[\PackageWarning{FLaAL}{##1 is no valid option for line. Please use left, right, straight, top or bot}{}\renewcommand{\t@line}{start}]
    }
    \define@key{trans}{label}{
        \IfStrEqCase{##1}{
            {top}{
                \renewcommand{\t@label}{south}
            }%
            {bot}{
                \renewcommand{\t@label}{north}
            }%
            {left}{
                \renewcommand{\t@label}{east}
            }%
            {right}{
                \renewcommand{\t@label}{west}
            }%
            {midway}{
                \renewcommand{\t@label}{midway}  
            }%
        }[\PackageWarning{FLaAL}{##1 is no valid option for label. Please choose one of top, bot, left or right}{}\renewcommand{\t@label}{south}]
    }
    
    % 1 = {anchor for text; default= south (means above)}
    % 2 = start
    % 3 = destination
    % 4 = labels
    \newcommand{\transition}[4][line=start,label=midway]
    {
        \IfSubStr{##1}{line}{
            \IfSubStr{##1}{label}{
                % line und label sind drin
                \setkeys{trans}{##1}
            }{
                % line aber kein label
                \setkeys{trans}{##1,label=midway}
            }
        }{
            \IfSubStr{##1}{label}{
                % label aber kein line
                \setkeys{trans}{line=start,##1}
            }{
                % kein line und kein label
                \setkeys{trans}{line=start,label=midway}
            }
        }
        
        % If start and destination are equal
        \ifthenelse{\equal{##2}{##3}}
        {
            % selftransition
            \IfStrEqCase{\t@line}{
                {bend left}{
                    \renewcommand{\t@line}{loop left}
                }%
                {bend right}{
                    \renewcommand{\t@line}{loop right}
                }%
                {straight}{
                    \PackageWarning{FLaAL}{straight is not a valid option for a self transition}{}
                    \renewcommand{\t@line}{loop above}
                }%
                {start}{
                    \renewcommand{\t@line}{loop above}
                }%
            }
        }
        {
            % normal transitions
            \IfStrEqCase{\t@line}{
                {loop above}{
                    \PackageWarning{FLaAL}{top is not a valid option for a normal transition}{}
                    \renewcommand{\t@line}{}
                }%
                {loop below}{
                    \PackageWarning{FLaAL}{bot is not a valid option for a normal transition}{}
                    \renewcommand{\t@line}{}
                }%
                {straight}{
                    \renewcommand{\t@line}{}
                }%
                {start}{
                    \renewcommand{\t@line}{}
                }%
            }
        }
        \ifthenelse{\equal{\t@label}{midway}}{
            \path (##2) edge [\t@line] node [\t@label,align=center] %
            {%
                \IfStrEqCase{#1}{
                    {fa}{\fa@label@processing{##4}}
                    {pa}{\pa@label@processing{##4}}
                    {tm}{\tm@label@processing{##4}}
                } %
            } (##3);
        }{
            \path (##2) edge [\t@line] node [anchor=\t@label,align=center] %
            {%
                \IfStrEqCase{#1}{
                    {fa}{\fa@label@processing{##4}}
                    {pa}{\pa@label@processing{##4}}
                    {tm}{\tm@label@processing{##4}}
                } %
            } (##3);
        }
    }
    \begin{tikzpicture}[->,>=stealth,auto]
}
{
    \end{tikzpicture}
}